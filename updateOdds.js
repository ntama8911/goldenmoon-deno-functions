const SUPABASE_URL = Deno.env.get("SUPABASE_URL"); 
const SUPABASE_SERVICE_KEY = Deno.env.get("SERVICE_ROLE");
const API_KEY = Deno.env.get("ODDS_API");

const SPORTS = [
  'soccer_uefa_european_championship',
  'soccer_epl', // –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞ 
  'soccer_spain_la_liga', // –õ–∞ –õ–∏–≥–∞
  'soccer_germany_bundesliga', // –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞
  'icehockey_nhl', // NHL
  'mma_mixed_martial_arts' // MMA
];
const MARKETS = 'h2h,spreads,totals';
const REGIONS = 'us';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ª–æ–≥–æ–≤
const log = {
  header: (text) => console.log(`\nüî• ========== ${text} ==========`),
  success: (text) => console.log(`‚úÖ ${text}`),
  info: (text) => console.log(`‚ÑπÔ∏è  ${text}`),
  warning: (text) => console.log(`‚ö†Ô∏è  ${text}`),
  error: (text) => console.log(`‚ùå ${text}`),
  debug: (text) => console.log(`üîç ${text}`),
  separator: () => console.log(`${'‚îÄ'.repeat(50)}`),
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    if (!API_KEY || !SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (ODDS_API, SUPABASE_URL, SERVICE_ROLE)");
    }
    
    log.header('–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í');
    log.info(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ${SPORTS.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
    log.info(`–†—ã–Ω–∫–∏: ${MARKETS}`);

    let allEventsData = [];
    const sportStats = {};

    log.separator();

    for (const sport of SPORTS) {
      const url = `https://api.the-odds-api.com/v4/sports/${sport}/odds/?apiKey=${API_KEY}&regions=${REGIONS}&markets=${MARKETS}`;
      log.info(`üèà –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: ${sport}`);
      
      const response = await fetch(url);
      
      if (!response.ok) {
        const errorText = await response.text();
        log.error(`–û—à–∏–±–∫–∞ API –¥–ª—è ${sport}: ${errorText}`);
        sportStats[sport] = { count: 0, error: errorText };
        continue;
      }

      const data = await response.json();
      sportStats[sport] = { count: data.length, error: null };
      log.success(`–ü–æ–ª—É—á–µ–Ω–æ ${data.length} —Å–æ–±—ã—Ç–∏–π –¥–ª—è ${sport}`);
      allEventsData = allEventsData.concat(data);
    }
    
    log.separator();
    log.header('–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò');
    Object.entries(sportStats).forEach(([sport, stats]) => {
      if (stats.error) {
        log.error(`${sport}: –û–®–ò–ë–ö–ê - ${stats.error}`);
      } else {
        log.success(`${sport}: ${stats.count} —Å–æ–±—ã—Ç–∏–π`);
      }
    });

    if (allEventsData.length === 0) {
      log.warning('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return new Response(JSON.stringify({ message: '–°–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    log.info(`üìä –í–°–ï–ì–û –ü–û–õ–£–ß–ï–ù–û: ${allEventsData.length} —Å–æ–±—ã—Ç–∏–π`);

    log.separator();
    log.header('–ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í');

    const marketAnalysis = {
      withH2H: 0,
      withSpreads: 0,
      withTotals: 0,
      football: { total: 0, withSpreads: 0, withTotals: 0 },
      hockey: { total: 0, withSpreads: 0, withTotals: 0 }
    };

    const eventsToInsert = allEventsData.map(event => {
      let bestH2H = null;
      let bestSpreads = null;
      let bestTotals = null;

      for (const bookmaker of event.bookmakers) {
        if (bookmaker.markets) {
          for (const market of bookmaker.markets) {
            if (market.key === 'h2h' && !bestH2H) {
              bestH2H = market;
            }
            if (market.key === 'spreads' && !bestSpreads) {
              bestSpreads = market;
            }
            if (market.key === 'totals' && !bestTotals) {
              bestTotals = market;
            }
          }
        }
      }

      if (bestH2H) marketAnalysis.withH2H++;
      if (bestSpreads) marketAnalysis.withSpreads++;
      if (bestTotals) marketAnalysis.withTotals++;

      if (event.sport_key.includes('soccer')) {
        marketAnalysis.football.total++;
        if (bestSpreads) marketAnalysis.football.withSpreads++;
        if (bestTotals) marketAnalysis.football.withTotals++;
      }

      if (event.sport_key.includes('icehockey')) {
        marketAnalysis.hockey.total++;
        if (bestSpreads) marketAnalysis.hockey.withSpreads++;
        if (bestTotals) marketAnalysis.hockey.withTotals++;
      }

      let homeOutcome = null;
      let awayOutcome = null;
      let drawOutcome = null;
      
      if (bestH2H && bestH2H.outcomes) {
        homeOutcome = bestH2H.outcomes.find(o => o.name === event.home_team);
        awayOutcome = bestH2H.outcomes.find(o => o.name === event.away_team);
        drawOutcome = bestH2H.outcomes.find(o => o.name === 'Draw');
      }
      
      let homeSpread = null;
      let awaySpread = null;
      
      if (bestSpreads && bestSpreads.outcomes) {
        homeSpread = bestSpreads.outcomes.find(o => o.name === event.home_team);
        awaySpread = bestSpreads.outcomes.find(o => o.name === event.away_team);
      }
      
      let overTotal = null;
      let underTotal = null;
      
      if (bestTotals && bestTotals.outcomes) {
        overTotal = bestTotals.outcomes.find(o => o.name === 'Over');
        underTotal = bestTotals.outcomes.find(o => o.name === 'Under');
      }

      return {
        id: event.id,
        sport: event.sport_title,
        league: event.sport_key,
        home_team: event.home_team,
        away_team: event.away_team,
        commence_time: event.commence_time,
        status: 'scheduled',
        home_odds: homeOutcome ? homeOutcome.price : null,
        away_odds: awayOutcome ? awayOutcome.price : null,
        draw_odds: drawOutcome ? drawOutcome.price : null,
        spreads_home_odds: homeSpread ? homeSpread.price : null,
        spreads_away_odds: awaySpread ? awaySpread.price : null,
        spreads_home_point: homeSpread ? homeSpread.point : null,
        spreads_away_point: awaySpread ? awaySpread.point : null,
        totals_over_odds: overTotal ? overTotal.price : null,
        totals_under_odds: underTotal ? underTotal.price : null,
        totals_point: overTotal ? overTotal.point : null,
      };
    }).filter(e => e.home_odds && e.away_odds);

    log.separator();
    log.header('–ê–ù–ê–õ–ò–¢–ò–ö–ê –†–´–ù–ö–û–í');
    log.info(`üìà –°–æ–±—ã—Ç–∏—è —Å H2H: ${marketAnalysis.withH2H}/${allEventsData.length}`);
    log.info(`üìä –°–æ–±—ã—Ç–∏—è —Å –§–æ—Ä–∞–º–∏: ${marketAnalysis.withSpreads}/${allEventsData.length}`);
    log.info(`üìâ –°–æ–±—ã—Ç–∏—è —Å –¢–æ—Ç–∞–ª–∞–º–∏: ${marketAnalysis.withTotals}/${allEventsData.length}`);
    
    log.separator();
    log.info(`‚öΩ –§–£–¢–ë–û–õ: ${marketAnalysis.football.total} —Å–æ–±—ã—Ç–∏–π`);
    log.info(`   ‚îî‚îÄ —Å –§–æ—Ä–∞–º–∏: ${marketAnalysis.football.withSpreads}/${marketAnalysis.football.total}`);
    log.info(`   ‚îî‚îÄ —Å –¢–æ—Ç–∞–ª–∞–º–∏: ${marketAnalysis.football.withTotals}/${marketAnalysis.football.total}`);
    
    log.info(`üèí –•–û–ö–ö–ï–ô: ${marketAnalysis.hockey.total} —Å–æ–±—ã—Ç–∏–π`);
    log.info(`   ‚îî‚îÄ —Å –§–æ—Ä–∞–º–∏: ${marketAnalysis.hockey.withSpreads}/${marketAnalysis.hockey.total}`);
    log.info(`   ‚îî‚îÄ —Å –¢–æ—Ç–∞–ª–∞–º–∏: ${marketAnalysis.hockey.withTotals}/${marketAnalysis.hockey.total}`);

    log.separator();
    log.info(`üîÑ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${eventsToInsert.length} —Å–æ–±—ã—Ç–∏–π`);

    log.header('–û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    log.info('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º/–≤—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è (Upsert)...');
    
    const upsertUrl = `${SUPABASE_URL}/rest/v1/events?on_conflict=id`;
    const upsertHeaders = {
      'apikey': SUPABASE_SERVICE_KEY,
      'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      'Content-Type': 'application/json',
      'Prefer': 'resolution=merge-duplicates',
    };

    const upsertResponse = await fetch(upsertUrl, {
      method: 'POST',
      headers: upsertHeaders,
      body: JSON.stringify(eventsToInsert),
    });

    if (!upsertResponse.ok) {
      const errorText = await upsertResponse.text();
      throw new Error(`Supabase UPSERT error: ${upsertResponse.status} - ${errorText}`);
    }

    log.success(`–í—Å—Ç–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${eventsToInsert.length} —Å–æ–±—ã—Ç–∏–π`);

    const message = `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${eventsToInsert.length} —Å–æ–±—ã—Ç–∏–π.`;
    
    log.separator();
    log.header('–†–ï–ó–£–õ–¨–¢–ê–¢');
    log.success(message);
    log.separator();

    return new Response(JSON.stringify({ message: message }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (e) {
    log.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ' + e.message);
    return new Response(JSON.stringify({ error: e.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
